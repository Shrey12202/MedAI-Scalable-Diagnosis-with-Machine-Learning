import os
import pandas as pd
from PIL import Image
from tqdm import tqdm

def resize_and_store_images(df, root_dir, output_dir, img_size=(224, 224)):
    """
    Resize images to `img_size` and store them in the same patient/study hierarchy inside output_dir.
    """
    os.makedirs(output_dir, exist_ok=True)

    # Extract patient_id (not strictly needed, just for clarity/logging)
    df['patient_id'] = df['Path'].apply(lambda x: x.split('/')[2])

    failed_images = []

    for idx, row in tqdm(df.iterrows(), total=len(df), desc=f"Processing {output_dir}"):
        try:
            # Extract relative image path: ['patientXXXX', 'studyX', 'image.jpg']
            relative_path_parts = row['Path'].split('/')[2:]

            # Build full input path
            full_img_path = os.path.join(root_dir, *relative_path_parts)
            full_img_path = os.path.normpath(full_img_path)

            # Open and resize
            img = Image.open(full_img_path).convert('RGB')
            img = img.resize(img_size)

            # Build output path with same structure
            save_path = os.path.join(output_dir, *relative_path_parts)
            os.makedirs(os.path.dirname(save_path), exist_ok=True)

            # Save resized image
            img.save(save_path)

        except Exception as e:
            print(f"Error processing {row['Path']}: {e}")
            failed_images.append((row['Path'], str(e)))

    print(f"Done saving resized images in: {output_dir}")
    print(f"Failed to process {len(failed_images)} images.\n")
    return failed_images


# --- Main Execution ---
if __name__ == "__main__":
    # Load CSVs
    df_train = pd.read_csv('train.csv')
    df_test  = pd.read_csv('test1.csv')
    df_sim1  = pd.read_csv('sim1.csv')
    df_sim2  = pd.read_csv('sim2.csv')

    # Single root_dir: where all images are located
    root_dir = r"C:\Users\shaba\Downloads\archive\train"

    # Output directories
    output_dir_train = os.path.join('processed1', 'train')
    output_dir_test  = os.path.join('processed1', 'test')
    output_dir_sim1  = os.path.join('processed1', 'sim1')
    output_dir_sim2  = os.path.join('processed1', 'sim2')

    # Process and resize all 4 splits
    failed_train = resize_and_store_images(df_train, root_dir, output_dir_train)
    failed_test  = resize_and_store_images(df_test,  root_dir, output_dir_test)
    failed_sim1  = resize_and_store_images(df_sim1, root_dir, output_dir_sim1)
    failed_sim2  = resize_and_store_images(df_sim2, root_dir, output_dir_sim2)

    # Optionally, save failed image logs
    with open("failed_images.txt", "w") as f:
        for split, fails in zip(
            ['train', 'test', 'sim1', 'sim2'],
            [failed_train, failed_test, failed_sim1, failed_sim2]
        ):
            for path, error in fails:
                f.write(f"[{split}] {path} --> {error}\n")

    print("All splits processed. Failed image paths saved to failed_images.txt.")
